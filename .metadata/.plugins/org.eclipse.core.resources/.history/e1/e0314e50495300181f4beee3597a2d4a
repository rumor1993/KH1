package net.board.db;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;


/*
 	DAO(Data Access Object) 클래스
 	- 데이터 베이스와 연동하여 레코드의 추가, 수정, 삭제 작업이
 	이루어지는 클래스 입니다.
 	
 	- 어떤 Action 클래스가 호출되더라도 그에 해당하는 데이터베이스
 	연동 처리는 DAO 클래스에서 이루어지게 됩니다.
 */

public class BoardDAO {
	DataSource ds;
	Connection con;
	PreparedStatement pstmt;
	ResultSet rs;
	int result;
	
	// 생성자에게 JNDI 리소스를 참조하여 Connection 객체를 얻어옵니다.
	public BoardDAO() {
		try {
			Context init = new InitialContext();
			ds = (DataSource) init.lookup("java:comp/env/jdbc/OracleDB");
			
		}catch(Exception ex) {
			System.out.println("DB 연결 실패 : " + ex);
			return;
		}
	}

	public int getListConut() {
		try {
			con = ds.getConnection();
			String sql = "select count(*) from board";
			pstmt = con.prepareStatement(sql);
	
			rs = pstmt.executeQuery();
			result = 0;
			while(rs.next()) {
				result = rs.getInt(1);
			}
			
		}catch(Exception e) {
			System.out.println("getListCount() 에러 : " + e);
		}finally {
			if(rs!=null) try {rs.close();} catch(SQLException e) {e.printStackTrace();}
			if(pstmt!=null) try {pstmt.close();} catch(Exception e) {e.printStackTrace();}
			if(con!=null) try {con.close();}catch(Exception e) {e.printStackTrace();}
		}
		return result;
	}
	
	// 글 목록 보기
	public List<BoardBean> getBoardList(int page, int limit) {
		// page : 페이지
		// limit : 페이지 당 목록의 수
		// BOARD_RE_REF desc, BOARD_RE_SEQ asc에 의해 정렬한 것을 
		// 조건절에 맞는 rnum의 범위 만큼 가져오는 쿼리문 입니다.
		
		
		String board_list_sql = 
				"select * from "
				+		"(select rownum rnum, BOARD_NUM,BOARD_NAME, BOARD_SUBJECT, BOARD_CONTENT, BOARD_FILE,"
				+ 		"BOARD_RE_REF, BOARD_RE_LEV, BOARD_RE_SEQ, BOARD_READCOUNT, BOARD_DATE from"
				+ 		"(select * from board "
				+ 		"order by BOARD_RE_REF desc,"
				+ 		"BOARD_RE_SEQ asc)) "
				+ "where rnum>=? and rnum<=?";
								// 한페이지당 10개식 목록인 경우 	1페이지	2페이지	3페이지	4페이지
		int startrow=(page-1)* limit + 1; // 읽기 시작할 row 번호(1		 11		21		 31)
		int endrow= startrow + limit - 1; // 읽을 마지막 row 번호(10		 20		30		 40)
		
		try {
		con = ds.getConnection();
		pstmt = con.prepareStatement(board_list_sql);
		pstmt.setInt(1, startrow);
		pstmt.setInt(2, endrow);
		rs = pstmt.executeQuery();
		
		while(rs.next()) {
			BoardBean board = new BoardBean();
			board.setBOARD_NUM(rs.getInt("BOARD_NUM"));
			board.setBORAD_NAME(rs.getString("BOARD_NAME"));
			board.setBORAD_SUBJECT(rs.getString("BOARD_SUBJECT"));
			board.setBORAD_CONTENT(rs.getString("BOARD_CONTENT"));
			board.setBORAD_FILE(rs.getString("BOARD_FILE"));
			board.setBORAD_RE_REF(rs.getInt("BORAD_RE_REF"));
			board.setBORAD_RE_LEV(rs.getInt("BOARD_RE_LEV"));
			board.setBORAD_RE_SEQ(rs.getInt("BOARD_RE_SEQ"));
			board.setBORAD_READCONUT(rs.getInt("BOARD_READCOUNT"));
			board.setBORAD_DATE(rs.getDate("BOARD_DATE"));
			list.add(board);
			
		}
		return list;
		// DB에서 가져온 테이블 VO객체에 담습니다.
		}catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}
